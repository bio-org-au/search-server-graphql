type Author {
  extraInformation: String
  fullName: String
  id: ID
  ipniId: String
  name: String
  standardForm: String
}

type AuthorPaginator {
  data: [Author!]!
  paginatorInfo: PaginatorInfo!
}

type NameCategory {
  id: ID!
  maxParentsAllowed: Int!
  minParentsRequired: Int!
  name: String!
  sortOrder: Int!
}

type NameGroup {
  id: ID!
  name: String!
}

type NameRank {
  hasParent: Boolean!
  id: ID!
  name: String!
  nameGroup: NameGroup!
  parentRank: NameRank
}

type NameStatus {
  display: Boolean!
  id: ID!
  name: String!
  nameGroup: NameGroup!
  nomIlleg: Boolean!
  nomInval: Boolean!
}

type NameType {
  cultivar: Boolean!
  formula: Boolean!
  hybrid: Boolean!
  id: ID!
  name: String!
  nameGroup: NameGroup!
  scientific: Boolean!
}

enum NomenclaturalStatusEnum {
  """
  Isonym
  """
  ISONYM

  """
  Legitimate
  """
  LEGITIMATE

  """
  manuscript
  """
  MANUSCRIPT

  """
  nomina utique rejicienda
  """
  NOMINA_UTIQUE_REJICIENDA

  """
  nom. alt.
  """
  NOM_ALT

  """
  nom. alt., nom. illeg
  """
  NOM_ALT_NOM_ILLEG

  """
  nom. cons.
  """
  NOM_CONS

  """
  nom. cons., nom. alt.
  """
  NOM_CONS_NOM_ALT

  """
  nom. cons., orth. cons.
  """
  NOM_CONS_ORTH_CONS

  """
  nom. cult.
  """
  NOM_CULT

  """
  nom. cult., nom. alt.
  """
  NOM_CULT_NOM_ALT

  """
  nom. et orth. cons.
  """
  NOM_ET_ORTH_CONS

  """
  nom. et typ. cons.
  """
  NOM_ET_TYP_CONS

  """
  nom. illeg.
  """
  NOM_ILLEG

  """
  nom. illeg., nom. rej.
  """
  NOM_ILLEG_NOM_REJ

  """
  nom. illeg., nom. superfl.
  """
  NOM_ILLEG_NOM_SUPERFL

  """
  nom. inval.
  """
  NOM_INVAL

  """
  nom. inval., nom. alt.
  """
  NOM_INVAL_NOM_ALT

  """
  nom. inval., nom. ambig.
  """
  NOM_INVAL_NOM_AMBIG

  """
  nom. inval., nom. confus.
  """
  NOM_INVAL_NOM_CONFUS

  """
  nom. inval., nom. nud.
  """
  NOM_INVAL_NOM_NUD

  """
  nom. inval., nom. prov.
  """
  NOM_INVAL_NOM_PROV

  """
  nom. inval., nom. subnud.
  """
  NOM_INVAL_NOM_SUBNUD

  """
  nom. inval., opera utique oppressa
  """
  NOM_INVAL_OPERA_UTIQUE_OPPRESSA

  """
  nom. inval., pro syn.
  """
  NOM_INVAL_PRO_SYN

  """
  nom. inval., tautonym
  """
  NOM_INVAL_TAUTONYM

  """
  nom. rej.
  """
  NOM_REJ

  """
  nom. superfl.
  """
  NOM_SUPERFL

  """
  orth. cons.
  """
  ORTH_CONS

  """
  orth. var.
  """
  ORTH_VAR

  """
  typ. cons.
  """
  TYP_CONS
}

type PaginatorInfo {
  count: Int!
  currentPage: Int
  firstItem: Int
  hasMorePages: Boolean
  lastItem: Int
  lastPage: Int
  perPage: Int
  total: Int
}

"""
Root level queries.
"""
type Query {
  author(id: String): Author
  authors(count: Int, page: Int, size: Int): AuthorPaginator
  name(id: ID!): name
  nameCategory(id: Int!): NameCategory
  nameGroup(id: Int): NameGroup
  nameRank(id: Int): NameRank
  nameStatus(id: Int): NameStatus
  nameType(id: Int): NameType
  name_check(limit: Int, names: [String], offset: Int): name_check_result
  name_search(author_abbrev: String, base_author_abbrev: String, common_name: Boolean, cultivar_name: Boolean, ex_author_abbrev: String, ex_base_author_abbrev: String, family: String, genus: String, id: ID, include_ranks_below: Boolean, iso_publication_date: String, limit: Int, name_element: String, offset: Int, order_by_name: Boolean, order_by_name_within_family: Boolean, protologue: String, publication: String, rank: String, scientific_autonym_name: Boolean, scientific_hybrid_formula_name: Boolean, scientific_name: Boolean, scientific_named_hybrid_name: Boolean, search_term: String, species: String, type_note_keys: [String], type_note_text: String, type_of_name: String): name_search_result
  publication_search(limit: Int, publication: String): publication_search
  ranks: name_rank_option
  refAuthorRole(id: Int!): RefAuthorRoleType
  refType(id: Int!): RefType
  reference(id: Int!): Reference
  references(count: Int, page: Int, size: Int): ReferencePaginator
  runtime_environment: runtime_environment
  setting(search_term: String): String
  taxonomicName(id: String): TaxonomicName
  taxonomicNameUsage(id: ID): TaxonomicNameUsage
  taxonomicNameUsageNote(id: ID): TaxonomicNameUsageNote
  taxonomicNameUsages(count: Int, filter: TaxonomicNameUsageFilter, page: Int): TaxonomicNameUsagePaginator
  taxonomicNames(count: Int, fullName: String, page: Int): TaxonomicNamePaginator
  taxonomy_search(accepted_name: Boolean, author_abbrev: String, cross_reference: Boolean, excluded_name: Boolean, fuzzy_or_exact: String, id: ID, limit: Int, offset: Int, search_term: String): taxonomy_search
}

type RefAuthorRoleType {
  id: ID!
  name: String!
}

type RefType {
  id: ID!
  name: String!
  parent: RefType
  parentOptional: Boolean!
  useParentDetails: Boolean!
}

type Reference {
  author: Author!
  citation: String
  doi: String
  edition: String
  id: ID!
  isbn: String
  issn: String
  pages: String
  parent: Reference
  publicationDate: String
  published: Boolean!
  publishedLocation: String
  publisher: String
  refAuthorRole: RefAuthorRoleType!
  refType: RefType!
  title: String!
  tl2: String
  uri: String
  verbatimAuthor: String
  volume: String
  year: Int
}

type ReferencePaginator {
  data: [Reference!]!
  paginatorInfo: PaginatorInfo!
}

type TaxonomicName {
  author: Author
  authorship: String
  basionymAuthor: Author
  basionymExAuthor: Author
  cultivarEpithet: String
  exAuthor: Author
  fullName: String
  fullNameWithAuthorship: String
  genericName: String
  id: ID!
  infragenericEpithet: String
  infraspecificEpithet: String
  namePublishedIn: Reference
  nomenclaturalCode: String
  nomenclaturalStatus: NameStatus
  publishedYear: Int
  rank: NameRank!
  specificEpithet: String
  verbatimRank: String
}

type TaxonomicNamePaginator {
  data: [TaxonomicName!]!
  paginatorInfo: PaginatorInfo!
}

type TaxonomicNameUsage {
  accordingTo: Reference
  children: [TaxonomicNameUsage]
  id: ID
  microReference: String
  notes: [TaxonomicNameUsageNote]
  parent: TaxonomicNameUsage
  taxonomicName: TaxonomicName
  taxonomicNameUsageLabel: String
  verbatimNameString: String
}

"""
TaxonomicNameUsageFilterType
"""
input TaxonomicNameUsageFilter {
  autonym: Boolean
  name: String!
  newCombination: Boolean
  newName: Boolean
  newStatus: Boolean
  newTaxon: Boolean
  nomenclaturalStatus: NomenclaturalStatusEnum
  primary: Boolean
  protonym: Boolean
  taxonomicNameUsageType: TaxonomicStatusEnum
  taxonomicStatus: String
}

type TaxonomicNameUsageNote {
  id: ID
  kindOfNote: String
  value: String
}

type TaxonomicNameUsagePaginator {
  data: [TaxonomicNameUsage!]!
  paginatorInfo: PaginatorInfo!
}

enum TaxonomicStatusEnum {
  """
  Accepted
  """
  ACCEPTED

  """
  Excluded
  """
  EXCLUDED
}

type accepted_tree_details {
  comment: instance_note
  distribution: instance_note
  is_accepted: Boolean
  is_excluded: Boolean
}

type as_misapplication {
  cited_page: String
  cited_reference_author_string: String
  cited_simple_name: String
  citing_instance_id: String
  citing_reference_author_string_and_year: String
  citing_reference_id: String
  misapplying_author_string_and_year: String
  name_author_string: String
}

type earlier_accepted_tree_details {
  comment: instance_note
  distribution: instance_note
}

type instance_note {
  key: String
  value: String
}

type misapplication_citation_details {
  misapplied_in_reference_citation: String
  misapplied_in_reference_citation_html: String
  misapplied_in_reference_id: ID
  misapplied_in_reference_year: Int
  misapplied_on_page: String
  misapplied_on_page_qualifier: String
  name_is_repeated: Boolean
}

type misapplication_details {
  direction: String
  misapplication_type_label: String
  misapplied_in_references: [misapplied_in_reference]
  misapplied_to_full_name: String
  misapplied_to_name_id: ID
}

type misapplied_in_reference {
  citation: String
  display_entry: String
  id: ID
  page: String
  page_qualifier: String
}

type name {
  family_name: String
  full_name: String
  full_name_html: String
  id: ID
  images: name_images
  name_rank_name: String
  name_status_is_displayed: Boolean
  name_status_name: String
  name_usages: [name_usage]
  simple_name: String
}

type name_check {
  found: Boolean
  index: ID
  matched_name_accepted_taxonomy_accepted: Boolean
  matched_name_accepted_taxonomy_excluded: Boolean
  matched_name_family_name: String
  matched_name_family_name_id: ID
  matched_name_full_name: String
  matched_name_id: ID
  search_term: String
}

type name_check_result {
  names_checked_count: Int
  names_checked_limited: Boolean
  names_found_count: Int
  names_to_check_count: Int
  names_with_match_count: Int
  results: [name_check]
  results_count: Int
  results_limited: Boolean
}

type name_images {
  count: Int
  link: String
}

type name_rank_option {
  options: [String]
}

type name_search_result {
  count: Int
  names: [name]
}

type name_usage {
  accepted_tree_details: accepted_tree_details
  instance_id: ID
  instance_type_name: String
  misapplication: Boolean
  misapplication_details: misapplication_details
  non_current_accepted_tree_details: earlier_accepted_tree_details
  notes: [instance_note]
  primary_instance: Boolean
  protologue_link: String
  reference_details: reference_details
  standalone: Boolean
  synonyms: [synonym]
}

type publication {
  citation: String
  citation_html: String
  id: ID
}

type publication_search {
  count: Int
  publications: [publication]
}

type reference_details {
  bhl_url: String
  citation: String
  citation_html: String
  full_citation_with_page: String
  id: ID
  iso_publication_date: String
  page: String
  page_qualifier: String
  year: String
}

type runtime_environment {
  app_version: String
  database: String
  jruby_version: String
  rails_env: String
  rails_version: String
  ruby_platform: String
  ruby_version: String
}

type synonym {
  full_name: String
  full_name_html: String
  has_type_synonym: Boolean
  id: ID
  instance_type: String
  label: String
  misapplication_citation_details: misapplication_citation_details
  misapplied: Boolean
  name_id: ID
  name_status_name: String
  of_type_synonym: Boolean
  page: String
  page_qualifier: String
  reference_citation: String
  reference_page: String
  year: Int
}

type taxon {
  cites_instance_id: ID
  cross_reference_to: taxon_cross_reference_to
  cross_referenced_full_name: String
  cross_referenced_full_name_id: String
  full_name: String
  full_name_html: String
  id: ID
  instance_id: ID
  is_cross_reference: Boolean
  is_excluded: Boolean
  is_misapplication: Boolean
  is_pro_parte: Boolean
  name_status_is_displayed: Boolean
  name_status_name: String
  order_string: String
  reference_citation: String
  reference_id: ID
  simple_name: String
  source_object: String
  synonyms: [taxon_synonym]
  taxon_comment: String
  taxon_details: taxon_details
  taxon_distribution: String
}

type taxon_cross_reference_to {
  as_misapplication: as_misapplication
  full_name: String
  full_name_html: String
  is_doubtful: Boolean
  is_misapplication: Boolean
  is_pro_parte: Boolean
  name_id: String
}

type taxon_details {
  instance_id: String
  taxon_comment: String
  taxon_distribution: String
  taxon_synonyms: [taxon_synonym]
}

type taxon_misapplied_details {
  cites_reference_author_string: String
  cites_reference_citation: String
  cites_reference_citation_html: String
  cites_simple_name: String
  name_author_string: String
  page: String
}

type taxon_synonym {
  full_name: String
  full_name_html: String
  id: ID
  is_doubtful: Boolean
  is_misapplied: Boolean
  is_pro_parte: Boolean
  misapplication_details: taxon_misapplied_details
  name_id: ID
  name_status: String
  name_status_is_displayed: Boolean
  page: String
  page_qualifier: String
  simple_name: String
}

type taxonomy_search {
  count: Int
  taxa: [taxon]
}